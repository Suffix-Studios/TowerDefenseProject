import { t } from "@rbxts/t";
import { MemoryStoreService, DataStoreService } from "./mock";
import { LogMessage } from "./log";
import { MigrationChain } from "./store";

/**
    Configuration for creating a new Store.

    @interface BaseStoreConfig
    .name string -- A unique name for this store (e.g., "PlayerDataProd"). Used for logging and deriving DataStore/MemoryStore keys.
	.template T -- A deep copyable Luau table/value representing the default state for a new key.
	.schema (value: any) -> (boolean, string?) -- A validation function (e.g., created with `t`) that checks if data conforms to the expected structure. Returns `true` if valid, or `false` and an error message if invalid.
	.migrationSteps {Types.MigrationStep}? -- An optional ordered list of migration steps to apply to data loaded from the DataStore if its schema is older than the current version. See `Migrations.luau`.
	.importLegacyData ((key: string) -> any?)? -- An optional function to load data from a different, legacy storage system when a key is accessed for the first time and doesn't exist in this store.
	.dataStoreService DataStoreService? -- An optional override for the Roblox DataStoreService. Useful for testing or custom storage implementations. Defaults to `game:GetService("DataStoreService")`.
	.memoryStoreService MemoryStoreService? -- An optional override for the Roblox MemoryStoreService. Useful for testing. Defaults to `game:GetService("MemoryStoreService")`.
	.changedCallbacks { (key: string, newData: T, oldData: T?) -> () }? -- An optional list of functions called *after* data for a key has been successfully updated. Provides the key, the new data state, and the previous data state (if available).
	.logCallback ((logMessage: Log.LogMessage) -> ())? -- A function to receive log messages generated by this Store instance and its components. If omitted, logs are discarded. See [Log].
 */
export interface BaseStoreConfig<Schema> {
    // A unique name for this store (e.g., "PlayerDataProd"). Used for logging and deriving DataStore/MemoryStore keys.
    name: string;
    // A deep copyable Luau table/value representing the default state for a new key.
    template: NoInfer<Schema>;
    // A validation function (e.g., created with `t`) that checks if data conforms to the expected structure. Returns `true` if valid, or `false` and an error message if invalid.
    schema: t.check<Schema>;
    // An optional ordered list of migration steps to apply to data loaded from the DataStore if its schema is older than the current version. See `Migrations.luau`.
    migrationSteps?: MigrationChain<NoInfer<Schema>>;
    // An optional function to load data from a different, legacy storage system when a key is accessed for the first time and doesn't exist in this store.
    importLegacyData?: (key: string) => any | undefined;
    // An optional list of functions called *after* data for a key has been successfully updated. Provides the key, the new data state, and the previous data state (if available).
    changedCallbacks?: ((
        key: string,
        newData: Schema,
        oldData?: Schema
    ) => void)[];
    // A function to receive log messages generated by this Store instance and its components. If omitted, logs are discarded. See [Log].
    logCallback?: (logMessage: LogMessage) => void;
    // An optional override for the Roblox MemoryStoreService. Useful for testing. Defaults to `game:GetService("MemoryStoreService")`.
    memoryStoreService?: MemoryStoreService;
    // An optional override for the Roblox DataStoreService. Useful for testing or custom storage implementations. Defaults to `game:GetService("DataStoreService")`.
    dataStoreService?: DataStoreService;
}
