-- Compiled with roblox-ts v2.3.0
local TS = _G[script]
local createSerializer = TS.import(script, script.Parent, "serialization", "createSerializer").createSerializer
local createDeserializer = TS.import(script, script.Parent, "serialization", "createDeserializer").createDeserializer
local processSerializerData = TS.import(script, script.Parent, "processSerializerData").processSerializerData
--[[
	*
	 * A binary serializer.
	 
]]
--[[
	*
	 * Creates a binary serializer automatically from a given type.
	 *
	 * This generates the {@link SerializerMetadata} type,
	 * which you can reuse in your own user macros to generate arbitrary serializers (e.g for a networking library.)
	 *
	 * Disclaimer: this serializer depends on the order of emit, but this isn't guaranteed to be stable across compiles.
	 * This means two binary serializers for the type `T` may be incompatible,
	 * if they're not created within the same TS file (and thereof might not be compiled at the same time.)
	 *
	 * @metadata macro
	 
]]
local function createBinarySerializer(meta)
	local processed = processSerializerData(meta)
	return {
		serialize = createSerializer(processed),
		deserialize = createDeserializer(processed),
	}
end
return {
	createBinarySerializer = createBinarySerializer,
}
