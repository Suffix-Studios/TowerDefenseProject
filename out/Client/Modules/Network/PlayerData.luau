--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Promise = require(ReplicatedStorage.rbxts_include.Promise)
local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
export type Common_Shared_EnemyType = ("Normal" | "Speedy" | "Tanky" | "MiniBoss" | "Boss")
export type Common_Shared_InventoryTower = { Exp: number, Name: string, Level: number }
export type Common_Shared_PlayerData = { Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? }
export type Common_Client_InputAction = { Action: string, State: any, Key: any }
local function ReadEVENT_replicateData(): ({ Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? })
	-- Read BLOCK: 7 bytes
	local BLOCK_START = Read(7)
	local Value = {} :: any
	if buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Gold = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Silver = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.Level = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 3) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Exp = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 4) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.MaxTowers = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 5) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.TowersInventory = {}
		local Elements_2 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		for _ = 1, Elements_2 do
			local OFFSET_0 = Read(2)
			local Length = buffer.readu16(RecieveBuffer, OFFSET_0)
			local Key_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			local Element_2 = {} :: any
			local OFFSET_1 = Read(4)
			Element_2.Exp = buffer.readu32(RecieveBuffer, OFFSET_1)
			local OFFSET_2 = Read(2)
			Length = buffer.readu16(RecieveBuffer, OFFSET_2)
			Element_2.Name = buffer.readstring(RecieveBuffer, Read(Length), Length)
			local OFFSET_3 = Read(2)
			Element_2.Level = buffer.readu16(RecieveBuffer, OFFSET_3)
			Value.TowersInventory[Key_2] = Element_2
		end
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 6) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		-- START ARRAY
		local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Length < 1 then error(`Expected "Length" to be larger than 1, got {Length} instead.`) end
		if Length > 6 then error(`Expected "Length" to be smaller than 6, got {Length} instead.`) end
		Value.Loadout = table.create(Length)
			-- Read BLOCK: 2 bytes
		local ARRAY_START_2 = Read(2 * Length)
		for Index = 1, Length do
			-- Read 2
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
			local Item_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			table.insert(Value.Loadout, Item_2)
		end
		-- END ARRAY
	end
	return Value
end

local function WriteFUNCTION_DATA_requestData(Value: nil, InvocationIdentifier: number): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, InvocationIdentifier)
end

local function ReadFUNCTION_RETURN_requestData(): ({ Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? })
	-- Read BLOCK: 8 bytes
	local BLOCK_START = Read(8)
	local Success = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Success ~= 1 then
		error("Server encountered an error.")
	end
	local Value = {} :: any
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Gold = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Silver = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 3) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.Level = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 4) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Exp = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 5) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.MaxTowers = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 6) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.TowersInventory = {}
		local Elements_2 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		for _ = 1, Elements_2 do
			local OFFSET_0 = Read(2)
			local Length = buffer.readu16(RecieveBuffer, OFFSET_0)
			local Key_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			local Element_2 = {} :: any
			local OFFSET_1 = Read(4)
			Element_2.Exp = buffer.readu32(RecieveBuffer, OFFSET_1)
			local OFFSET_2 = Read(2)
			Length = buffer.readu16(RecieveBuffer, OFFSET_2)
			Element_2.Name = buffer.readstring(RecieveBuffer, Read(Length), Length)
			local OFFSET_3 = Read(2)
			Element_2.Level = buffer.readu16(RecieveBuffer, OFFSET_3)
			Value.TowersInventory[Key_2] = Element_2
		end
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 7) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		-- START ARRAY
		local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Length < 1 then error(`Expected "Length" to be larger than 1, got {Length} instead.`) end
		if Length > 6 then error(`Expected "Length" to be smaller than 6, got {Length} instead.`) end
		Value.Loadout = table.create(Length)
			-- Read BLOCK: 2 bytes
		local ARRAY_START_2 = Read(2 * Length)
		for Index = 1, Length do
			-- Read 2
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
			local Item_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			table.insert(Value.Loadout, Item_2)
		end
		-- END ARRAY
	end
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Common = {
		Shared = {
		},
		Client = {
		},
		Server = {
		},
	},
	replicateData = {
		on = NOOP
	},
	requestData = {
		invoke = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? } = ReadEVENT_replicateData()
			if Events.Reliable[0] ~= nil then
				task.spawn(Events.Reliable[0], Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"replicateData\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			-- Read BLOCK: 1 bytes
			local BLOCK_START = Read(1)
			local InvocationIdentifier = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
			if Calls[InvocationIdentifier] ~= nil then
				local Success, ReturnValue = pcall(function ()
					return ReadFUNCTION_RETURN_requestData()
				end)
				task.spawn(Calls[InvocationIdentifier], Success, ReturnValue)
				Calls[InvocationIdentifier] = nil
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	stepReplication = StepReplication,

	Common = {
		Shared = {
		},
		Client = {
		},
		Server = {
		},
	},
	replicateData = {
		on = function(Listener: (Value: { Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? }) -> ()): () -> ()
			Events.Reliable[0] = Listener
			for Index, Arguments in Queue.Reliable[0] do
				task.spawn(Listener, table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				if Events.Reliable[0] == Listener then
					Events.Reliable[0] = nil
				end
			end
		end
	},
	requestData = {
		invoke = function(Value: nil): any
			return Promise.new(function (Resolve, Reject, OnCancel)
				local InvocationIdentifier = Invoke()
				if Calls[InvocationIdentifier] ~= nil then
					Invocations -= 1
					error("More than 256 calls are awaiting a response, this packet has been dropped.")
				end
				WriteFUNCTION_DATA_requestData(Value, InvocationIdentifier)
				Calls[InvocationIdentifier] = coroutine.running()
				OnCancel(function ()
					Calls[InvocationIdentifier] = nil
				end)
				local Success, ReturnValue: { Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? } = coroutine.yield()
				if Success ~= true then
					Reject("There was an exception while processing \"requestData\".")
					return 
				end
				Resolve(ReturnValue)
			end)
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL