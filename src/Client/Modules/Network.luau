--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Promise = require(ReplicatedStorage.rbxts_include.Promise)
local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Yielded = false
local Deferred = false
local SyncValidationThread = task.spawn(function()
	while true do
		local SerdesThread = coroutine.yield()
		Yielded = coroutine.status(SerdesThread) == "suspended"
		Deferred = false
	end
end)
Queue.Reliable[0] = table.create(256)
Queue.Reliable[1] = table.create(256)
Queue.Reliable[2] = table.create(256)
Queue.Reliable[4] = table.create(256)
export type Entities_Common_Shared_EnemyType = ("Normal" | "Speedy" | "Tanky" | "MiniBoss" | "Boss")
export type Entities_Common_Shared_InventoryTower = { Exp: number, Name: string, Level: number }
export type Entities_Common_Shared_PlayerData = { Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? }
export type Entities_Common_Client_InputAction = { Action: string, State: any, Key: any }
export type PlayerData_Common_Shared_EnemyType = ("Normal" | "Speedy" | "Tanky" | "MiniBoss" | "Boss")
export type PlayerData_Common_Shared_InventoryTower = { Exp: number, Name: string, Level: number }
export type PlayerData_Common_Shared_PlayerData = { Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? }
export type PlayerData_Common_Client_InputAction = { Action: string, State: any, Key: any }
local function Entities_ReadEVENT_entityRemoved(): (number)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Value = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	return Value
end

local function Entities_Enemy_ReadEVENT_enemyAdded(): ({ ModelName: string, Type: ("Normal" | "Speedy" | "Tanky" | "MiniBoss" | "Boss"), Air: boolean, Speed: number, MaxHealth: number, T: number })
	-- Read BLOCK: 11 bytes
	local BLOCK_START = Read(11)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.ModelName = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.Type = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 2)
	if Index == 0 then
		Value.Type = "Normal"
	elseif Index == 1 then
		Value.Type = "Speedy"
	elseif Index == 2 then
		Value.Type = "Tanky"
	elseif Index == 3 then
		Value.Type = "MiniBoss"
	elseif Index == 4 then
		Value.Type = "Boss"
	else
		error(`Unexpected enum: {Index}`)
	end
	Value.Air = (buffer.readu8(RecieveBuffer, BLOCK_START + 3) == 1)
	Value.Speed = buffer.readu8(RecieveBuffer, BLOCK_START + 4)
	Value.MaxHealth = buffer.readu32(RecieveBuffer, BLOCK_START + 5)
	Value.T = buffer.readi16(RecieveBuffer, BLOCK_START + 9)
	return Value
end

local function Entities_Tower_ReadEVENT_towerAdded(): ({ TowerName: string, Owner: number, Position: Vector3 })
	-- Read BLOCK: 16 bytes
	local BLOCK_START = Read(16)
	local Value = {} :: any
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	Value.TowerName = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Value.Owner = buffer.readf64(RecieveBuffer, BLOCK_START + 2)
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 10)
	local X
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			X = -math.huge
		else
			X = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		X = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		X = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		X = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 12)
	local Y
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Y = -math.huge
		else
			Y = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Y = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Y = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Y = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 14)
	local Z
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Z = -math.huge
		else
			Z = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Z = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Z = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Z = if Encoded // 0x8000 == 1 then -Result else Result
	end
	Value.Position = Vector3.new(X, Y, Z)
	return Value
end

local function Entities_Tower_WriteEVENT_placeTower(Value: { Origin: Vector3, Direction: Vector3, Slot: number }): ()
	-- Allocate BLOCK: 14 bytes
	local BLOCK_START = Allocate(14)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	local Vector = Value.Origin
	if Vector.X > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b0_11111_0000000000)
	elseif Vector.X < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000000)
	elseif Vector.X ~= Vector.X then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000001)
	elseif Vector.X == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0)
	else
		local float = Vector.X
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 1, Result)
	end
	if Vector.Y > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b0_11111_0000000000)
	elseif Vector.Y < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000000)
	elseif Vector.Y ~= Vector.Y then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0b1_11111_0000000001)
	elseif Vector.Y == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 3, 0)
	else
		local float = Vector.Y
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 3, Result)
	end
	if Vector.Z > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b0_11111_0000000000)
	elseif Vector.Z < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000000)
	elseif Vector.Z ~= Vector.Z then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0b1_11111_0000000001)
	elseif Vector.Z == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 5, 0)
	else
		local float = Vector.Z
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 5, Result)
	end
	local Vector = Value.Direction
	if Vector.X > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0b0_11111_0000000000)
	elseif Vector.X < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0b1_11111_0000000000)
	elseif Vector.X ~= Vector.X then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0b1_11111_0000000001)
	elseif Vector.X == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 7, 0)
	else
		local float = Vector.X
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 7, Result)
	end
	if Vector.Y > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0b0_11111_0000000000)
	elseif Vector.Y < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0b1_11111_0000000000)
	elseif Vector.Y ~= Vector.Y then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0b1_11111_0000000001)
	elseif Vector.Y == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 9, 0)
	else
		local float = Vector.Y
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 9, Result)
	end
	if Vector.Z > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 11, 0b0_11111_0000000000)
	elseif Vector.Z < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 11, 0b1_11111_0000000000)
	elseif Vector.Z ~= Vector.Z then
		buffer.writeu16(SendBuffer, BLOCK_START + 11, 0b1_11111_0000000001)
	elseif Vector.Z == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 11, 0)
	else
		local float = Vector.Z
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 11, Result)
	end
	buffer.writeu8(SendBuffer, BLOCK_START + 13, Value.Slot)
end

local function PlayerData_ReadEVENT_replicateData(): ({ Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? })
	-- Read BLOCK: 7 bytes
	local BLOCK_START = Read(7)
	local Value = {} :: any
	if buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Gold = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Silver = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.Level = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 3) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value.Exp = buffer.readu32(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 4) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.MaxTowers = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 5) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		Value.TowersInventory = {}
		local Elements_2 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		for _ = 1, Elements_2 do
			local OFFSET_0 = Read(2)
			local Length = buffer.readu16(RecieveBuffer, OFFSET_0)
			local Key_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			local Element_2 = {} :: any
			local OFFSET_1 = Read(4)
			Element_2.Exp = buffer.readu32(RecieveBuffer, OFFSET_1)
			local OFFSET_2 = Read(2)
			Length = buffer.readu16(RecieveBuffer, OFFSET_2)
			Element_2.Name = buffer.readstring(RecieveBuffer, Read(Length), Length)
			local OFFSET_3 = Read(2)
			Element_2.Level = buffer.readu16(RecieveBuffer, OFFSET_3)
			Value.TowersInventory[Key_2] = Element_2
		end
	end
	if buffer.readu8(RecieveBuffer, BLOCK_START + 6) == 1 then
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		-- START ARRAY
		local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Length < 1 then error(`Expected "Length" to be larger than 1, got {Length} instead.`) end
		if Length > 6 then error(`Expected "Length" to be smaller than 6, got {Length} instead.`) end
		Value.Loadout = table.create(Length)
			-- Read BLOCK: 2 bytes
		local ARRAY_START_2 = Read(2 * Length)
		for Index = 1, Length do
			-- Read 2
			local OPERATION_OFFSET_0 = ARRAY_START_2
			ARRAY_START_2 += 2
			Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET_0)
			local Item_2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
			table.insert(Value.Loadout, Item_2)
		end
		-- END ARRAY
	end
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Entities = {
		Common = {
			Shared = {
			},
			Client = {
			},
			Server = {
			},
		},
		entityRemoved = {
			on = NOOP
		},
		Enemy = {
			enemyAdded = {
				on = NOOP
			},
		},
		Tower = {
			towerAdded = {
				on = NOOP
			},
			placeTower = {
				fire = NOOP
			},
		},
	},
	PlayerData = {
		Common = {
			Shared = {
			},
			Client = {
			},
			Server = {
			},
		},
		replicateData = {
			on = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	Yielded = false
	if Deferred == false then
		Deferred = true
		task.defer(SyncValidationThread, coroutine.running())
	end
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: number = Entities_ReadEVENT_entityRemoved()
			if Events.Reliable[0] ~= nil then
				task.spawn(Events.Reliable[0], Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"entityRemoved\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value} :: {any})
			end
		elseif Index == 1 then
			local Value: { ModelName: string, Type: ("Normal" | "Speedy" | "Tanky" | "MiniBoss" | "Boss"), Air: boolean, Speed: number, MaxHealth: number, T: number } = Entities_Enemy_ReadEVENT_enemyAdded()
			if Events.Reliable[1] ~= nil then
				task.spawn(Events.Reliable[1], Value)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"enemyAdded\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		elseif Index == 2 then
			local Value: { TowerName: string, Owner: number, Position: Vector3 } = Entities_Tower_ReadEVENT_towerAdded()
			if Events.Reliable[2] ~= nil then
				task.spawn(Events.Reliable[2], Value)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"towerAdded\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value} :: {any})
			end
		elseif Index == 4 then
			local Value: { Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? } = PlayerData_ReadEVENT_replicateData()
			if Events.Reliable[4] ~= nil then
				task.spawn(Events.Reliable[4], Value)
			else
				if #Queue.Reliable[4] > 256 then
					warn("[Blink]: Event queue of \"replicateData\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[4], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	Yielded = false
	if Deferred == false then
		Deferred = true
		task.defer(SyncValidationThread, coroutine.running())
	end
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	stepReplication = StepReplication,

	Entities = {
		Common = {
			Shared = {
			},
			Client = {
			},
			Server = {
			},
		},
		entityRemoved = {
			on = function(Listener: (Value: number) -> ()): () -> ()
				Events.Reliable[0] = Listener
				for Index, Arguments in Queue.Reliable[0] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[0] = {}
				return function (): ()
					if Events.Reliable[0] == Listener then
						Events.Reliable[0] = nil
					end
				end
			end
		},
		Enemy = {
			enemyAdded = {
				on = function(Listener: (Value: { ModelName: string, Type: ("Normal" | "Speedy" | "Tanky" | "MiniBoss" | "Boss"), Air: boolean, Speed: number, MaxHealth: number, T: number }) -> ()): () -> ()
					Events.Reliable[1] = Listener
					for Index, Arguments in Queue.Reliable[1] do
						task.spawn(Listener, table.unpack(Arguments))
					end
					Queue.Reliable[1] = {}
					return function (): ()
						if Events.Reliable[1] == Listener then
							Events.Reliable[1] = nil
						end
					end
				end
			},
		},
		Tower = {
			towerAdded = {
				on = function(Listener: (Value: { TowerName: string, Owner: number, Position: Vector3 }) -> ()): () -> ()
					Events.Reliable[2] = Listener
					for Index, Arguments in Queue.Reliable[2] do
						task.spawn(Listener, table.unpack(Arguments))
					end
					Queue.Reliable[2] = {}
					return function (): ()
						if Events.Reliable[2] == Listener then
							Events.Reliable[2] = nil
						end
					end
				end
			},
			placeTower = {
				fire = function(Value: { Origin: Vector3, Direction: Vector3, Slot: number }): ()
					Entities_Tower_WriteEVENT_placeTower(Value)
				end
			},
		},
	},
	PlayerData = {
		Common = {
			Shared = {
			},
			Client = {
			},
			Server = {
			},
		},
		replicateData = {
			on = function(Listener: (Value: { Gold: number?, Silver: number?, Level: number?, Exp: number?, MaxTowers: number?, TowersInventory: {[string]: { Exp: number, Name: string, Level: number }}?, Loadout: { string }? }) -> ()): () -> ()
				Events.Reliable[4] = Listener
				for Index, Arguments in Queue.Reliable[4] do
					task.spawn(Listener, table.unpack(Arguments))
				end
				Queue.Reliable[4] = {}
				return function (): ()
					if Events.Reliable[4] == Listener then
						Events.Reliable[4] = nil
					end
				end
			end
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL